
#aggregation
#include <memory> 
 #include <vector> 
   #include "execution/executors/aggregation_executor.h" 
   namespace bustub { 
   AggregationExecutor::AggregationExecutor(ExecutorContext *exec_ctx, const AggregationPlanNode *plan, 
 std::unique_ptr<AbstractExecutor> &&child) 
 : AbstractExecutor(exec_ctx) {} 
   const AbstractExecutor *AggregationExecutor::GetChildExecutor() const { return child_.get(); } 
   void AggregationExecutor::Init() {} 
   bool AggregationExecutor::Next(Tuple *tuple, RID *rid) { return false; } 
   }  
#limit
#include "execution/executors/limit_executor.h" 
   namespace bustub { 
   LimitExecutor::LimitExecutor(ExecutorContext *exec_ctx, const LimitPlanNode *plan, 
 std::unique_ptr<AbstractExecutor> &&child_executor) 
 : AbstractExecutor(exec_ctx) {} 
   void LimitExecutor::Init() {} 
   bool LimitExecutor::Next(Tuple *tuple, RID *rid) { return false; } 
   }  
