BufferPoolManagerInstance::~BufferPoolManagerInstance() {
  delete[] pages_;
  delete replacer_;
}

bool BufferPoolManagerInstance::FlushPgImp(page_id_t page_id) {
  std::lock_guard<std::mutex> lock_guard(latch_);
  if (page_table_.count(page_id) == 0) {
    return false;
  }
  FlushPg(page_id);
  pages_[page_table_[page_id]].is_dirty_ = false;
  return true;
}

void BufferPoolManagerInstance::FlushAllPgsImp() {
  for (const auto &page : page_table_) {
    FlushPgImp(page.first);
  }
}

Page *BufferPoolManagerInstance::NewPgImp(page_id_t *page_id) {
  std::lock_guard<std::mutex> lock_guard(latch_);
  auto frame_id = FindFreshPage();
  if (frame_id == -1) {
    return nullptr;
  }
  pages_[frame_id].pin_count_++;
  pages_[frame_id].page_id_ = AllocatePage();
  page_table_[pages_[frame_id].page_id_] = frame_id;

  *page_id = pages_[frame_id].GetPageId();
  memset(pages_[frame_id].GetData(), 0, PAGE_SIZE);
  return &pages_[frame_id];
}

Page *BufferPoolManagerInstance::FetchPgImp(page_id_t page_id) {
  std::lock_guard<std::mutex> lock_guard(latch_);
  auto frame_id = FindPage(page_id);
  if (frame_id != -1) {
    replacer_->Pin(frame_id);
    pages_[frame_id].pin_count_++;
    pages_[frame_id].is_dirty_ = true;
    return &pages_[frame_id];
  }

  frame_id = FindFreshPage();
  if (frame_id == -1) {
    return nullptr;
  }
  page_table_[page_id] = frame_id;
  replacer_->Pin(page_table_[page_id]);
  pages_[frame_id].page_id_ = page_id;
  pages_[frame_id].pin_count_++;
  pages_[frame_id].is_dirty_ = false;
  disk_manager_->ReadPage(page_id, pages_[frame_id].GetData());

  return &pages_[frame_id];
}

bool BufferPoolManagerInstance::DeletePgImp(page_id_t page_id) {
  std::lock_guard<std::mutex> lock_guard(latch_);
  DeallocatePage(page_id);
  auto frame_id = FindPage(page_id);
  if (frame_id != -1) {
    if (pages_[frame_id].GetPinCount() != 0) {
      return false;
    }
    page_table_.erase(page_id);
    pages_[frame_id].page_id_ = INVALID_PAGE_ID;
    pages_[frame_id].is_dirty_ = false;
    memset(pages_[frame_id].GetData(), 0, PAGE_SIZE);
    free_list_.push_back(frame_id);
  }
  return true;
}

bool BufferPoolManagerInstance::UnpinPgImp(page_id_t page_id, bool is_dirty) {
  std::lock_guard<std::mutex> lock_guard(latch_);
  auto frame_id = FindPage(page_id);
  if (frame_id == -1 || pages_[frame_id].pin_count_ == 0) {
    return false;
  }
  pages_[frame_id].is_dirty_ = is_dirty;
  if (--pages_[frame_id].pin_count_ == 0) {
    replacer_->Unpin(frame_id);
    FlushPg(page_id);
  }
  return true;
}

page_id_t BufferPoolManagerInstance::AllocatePage() {
  const page_id_t next_page_id = next_page_id_;
  next_page_id_ += num_instances_;
  ValidatePageId(next_page_id);
  return next_page_id;
}

void BufferPoolManagerInstance::ValidatePageId(const page_id_t page_id) const {
  assert(page_id % num_instances_ == instance_index_);  // allocated pages mod back to this BPI
}

frame_id_t BufferPoolManagerInstance::FindFreshPage() {
  frame_id_t frame_id;
  if (!free_list_.empty()) {
    frame_id = free_list_.front();
    free_list_.pop_front();
    return frame_id;
  }
  if (replacer_->Victim(&frame_id)) {
    auto page_id = pages_[frame_id].page_id_;
    FlushPg(page_id);
    page_table_.erase(page_id);
    pages_[frame_id].is_dirty_ = false;
    return frame_id;
  }
  return -1;
}

void BufferPoolManagerInstance::FlushPg(page_id_t page_id) {
  auto frame_id = FindPage(page_id);
  if (pages_[frame_id].IsDirty()) {
    disk_manager_->WritePage(page_id, pages_[frame_id].GetData());
  }
}

frame_id_t BufferPoolManagerInstance::FindPage(page_id_t page_id) {
  auto iter = page_table_.find(page_id);
  if (iter != page_table_.cend()) {
    return iter->second;
  }
  return -1;
}
}  // namespace bustub
